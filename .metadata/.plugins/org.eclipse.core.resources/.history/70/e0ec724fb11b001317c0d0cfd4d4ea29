package lab;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JPanel;

/**
 * This is the class where the students should make changes. Does the double
 * buffering of the graphics.
 * 
 * @author Peter Sunnergren
 */
public class StablePanel extends JPanel {

	private static final long serialVersionUID = 1L;
	private static Image offscreen;
	private static Graphics buffer;
	private Dimension dimension;
	private ArrayList<Horse> horses;

	public StablePanel(StableApplet a) {

		dimension = new Dimension(400, 400);
		setMinimumSize(dimension);
		offscreen = a.createImage((int) dimension.getWidth(),
				(int) dimension.getHeight());
		buffer = offscreen.getGraphics();
		horses = new ArrayList<Horse>();
	}

	/**
	 * This method draws the stable, the person and the horses.
	 */
	public void paint(Graphics g) {

		buffer.clearRect(0, 0, dimension.width, dimension.height);
		Stable.instance().paint(buffer);

		Iterator<Horse> iterator = horses.iterator();

		while (iterator.hasNext())
			iterator.next().paint(buffer);

		Person.instance().paint(buffer);

		g.drawImage(offscreen, 0, 0, this);
	}

	/**
	 * This is called when the user presses 'h' and adds another horse.
	 */
	public void addHorse(StableApplet a) {

		Horse horse1 = new Horse(a);
		horses.add(horse1);
		new Thread(horse1).start();
	}

	/**
	 * Constructs the stable using the default implementation. In this method
	 * the students can see how a small stable is constructed in a nonflexible
	 * manner.
	 */
	public void defaultConstruction() {

		Room room1 = new Room(0, 0);
		Room room2 = new Room(1, 0);
		Room room3 = new Room(0, 1);
		Room room4 = new Room(1, 1);

		Door door13 = new Door(room1, room3);
		BoxDoor boxDoor24 = new BoxDoor(room2, room4);
		BoxDoor boxDoor34 = new BoxDoor(room3, room4);

		Stable.instance().addRoom(room1);
		Stable.instance().addRoom(room4);
		Stable.instance().addRoom(room3);
		Stable.instance().addRoom(room2);

		room1.setSide(new Wall(KeyEvent.VK_UP));
		room1.setSide(new Wall(KeyEvent.VK_LEFT));

		room2.setSide(new Wall(KeyEvent.VK_UP));
		room2.setSide(new Wall(KeyEvent.VK_RIGHT));

		room3.setSide(new Wall(KeyEvent.VK_DOWN));
		room3.setSide(new Wall(KeyEvent.VK_LEFT));

		room4.setSide(new Wall(KeyEvent.VK_RIGHT));
		room4.setSide(new Wall(KeyEvent.VK_DOWN));

		room1.setSide(room2);
		room2.setSide(room1);

		room1.setSide(door13);
		room3.setSide(door13);

		room2.setSide(boxDoor24);
		room4.setSide(boxDoor24);

		room3.setSide(boxDoor34);
		room4.setSide(boxDoor34);
	}

	private S_Factory createFactory(){
		return  new S_Factory();
	}
	
	private S_Builder createBuilder(Stable stable){
		return new S_Builder(stable);
	}
	
	/**
	 * Construction is made using an Factory.
	 */
	public void factoryConstruction()
	{
		S_Factory factory = createFactory();
		
		Room room;
		Wall wall;
		Room[][] roomArray = new Room[3][3];
		
		for(int column=0; column < roomArray.length; ++column)
		{
			for(int row=0; row < roomArray[0].length; ++row)
			{
				room = factory.createRoom(column, row);
				if(column == roomArray.length-1)
				{
					wall = factory.createWall(KeyEvent.VK_RIGHT);
					room.setSide(wall);
				}
				if(row == roomArray[0].length-1)
				{
					wall = factory.createWall(KeyEvent.VK_DOWN);
					room.setSide(wall);
				}
				if(row == 0)
				{
					wall = factory.createWall(KeyEvent.VK_UP);
					room.setSide(wall);
				}
				if(column == 0)
				{
					wall = factory.createWall(KeyEvent.VK_LEFT);
					room.setSide(wall);
				}

				Stable.instance().addRoom(room);
				roomArray[column][row] = room;
			}
		}
		
		//create corridor
		for(int column=0; column < roomArray.length-1; ++column){
			wall = factory.createWall(KeyEvent.VK_RIGHT);
			roomArray[column][0].setSide(wall);
			wall = factory.createWall(KeyEvent.VK_RIGHT);
			roomArray[column][2].setSide(wall);

			wall = factory.createWall(KeyEvent.VK_LEFT);
			roomArray[column+1][0].setSide(wall);
			wall = factory.createWall(KeyEvent.VK_LEFT);
			roomArray[column+1][2].setSide(wall);
			
			roomArray[column][2].setSide(wall);
			roomArray[column][1].setSide(roomArray[column+1][1]);
			roomArray[column+1][1].setSide(roomArray[column][1]);
		}
		
		

		BoxDoor boxDoor;
		for(int column=0; column < roomArray.length; ++column){
			boxDoor = factory.createBoxDoor(roomArray[column][1], roomArray[column][0]);
			roomArray[column][1].setSide(boxDoor);
			roomArray[column][0].setSide(boxDoor);
			
			boxDoor = factory.createBoxDoor(roomArray[column][1], roomArray[column][2]);
			roomArray[column][1].setSide(boxDoor);
			roomArray[column][2].setSide(boxDoor);
		}
		

		Door door = factory.createDoor(roomArray[2][0],roomArray[2][1]);
		roomArray[2][1].setSide(door);
		roomArray[2][0].setSide(door);
	}

	/**
	 * Construction using the Builder pattern.
	 */
	public void builderConstruction() {
		S_Builder builder = new S_Builder(Stable.instance());
		final int columns = 3;
		final int rows = 3;
		
		for(int column=0; column < columns-1; ++column){
			builder.addWall(column, 0, KeyEvent.VK_RIGHT);
			builder.addWall(column, 2, KeyEvent.VK_RIGHT);

			builder.addWall(column+1, 0, KeyEvent.VK_LEFT);
			builder.addWall(column+1, 2, KeyEvent.VK_LEFT);
			
			builder.setCorridor(column, 1, KeyEvent.VK_RIGHT);
		}
		
		for(int column=0; column < columns; ++column){
			builder.addBoxDoor(column, 0, KeyEvent.VK_DOWN);
			builder.addBoxDoor(column, 2, KeyEvent.VK_UP);
		}

		builder.addDoor(2, 0, KeyEvent.VK_DOWN);
		
		for(int column=0; column < columns; ++column)
		{
			for(int row=0; row < rows; ++row)
			{
				builder.addRoom(column, row);
				if(column == columns-1)
				{
					builder.addWall(column, row, KeyEvent.VK_RIGHT);
				}
				if(row == rows-1)
				{
					builder.addWall(column, row, KeyEvent.VK_DOWN);
				}
				if(row == 0)
				{
					builder.addWall(column, row, KeyEvent.VK_UP);
				}
				if(column == 0)
				{
					builder.addWall(column, row, KeyEvent.VK_LEFT);
				}
			}
		}
		builder.createResult();
	}

	
	
	
	

	/**
	 * Construction using prototypes.
	 */
	public void prototypeConstruction()
	{
		S_Prototype<Room> roomPrototype = new S_Prototype<Room>(new Room());
		S_Prototype<Wall> wallPrototype = new S_Prototype<Wall>(new Wall());

		// S_Prototype<BoxDoor> booxDoorPrototype = new S_Prototype<BoxDoor>(new
		// BoxDoor());
		Room room;
		Wall wall;
		Room[][] roomArray = new Room[3][3];
		
		for(int column=0; column < roomArray.length; ++column)
		{
			for(int row=0; row < roomArray[0].length; ++row)
			{
				room = roomPrototype.clone();
				room.move(column, row);
				if(column == roomArray.length-1)
				{
					wall = wallPrototype.clone();
					wall.orientate(KeyEvent.VK_RIGHT);
					room.setSide(wall);
				}
				if(row == roomArray[0].length-1)
				{
					wall = wallPrototype.clone();
					wall.orientate(KeyEvent.VK_DOWN);
					room.setSide(wall);
				}
				if(row == 0)
				{
					wall = wallPrototype.clone();
					wall.orientate(KeyEvent.VK_UP);
					room.setSide(wall);
				}
				if(column == 0)
				{
					wall = wallPrototype.clone();
					wall.orientate(KeyEvent.VK_LEFT);
					room.setSide(wall);
				}

				Stable.instance().addRoom(room);
				roomArray[column][row] = room;
			}
		}
		
		//create corridor
		for(int column=0; column < roomArray.length-1; ++column){
			wall = wallPrototype.clone();
			wall.orientate(KeyEvent.VK_RIGHT);
			roomArray[column][0].setSide(wall);
			wall = wallPrototype.clone();
			wall.orientate(KeyEvent.VK_RIGHT);
			roomArray[column][2].setSide(wall);

			wall = wallPrototype.clone();
			wall.orientate(KeyEvent.VK_LEFT);
			roomArray[column+1][0].setSide(wall);
			wall = wallPrototype.clone();
			wall.orientate(KeyEvent.VK_LEFT);
			roomArray[column+1][2].setSide(wall);
			
			roomArray[column][2].setSide(wall);
			roomArray[column][1].setSide(roomArray[column+1][1]);
			roomArray[column+1][1].setSide(roomArray[column][1]);
		}
		
		

		S_Prototype<BoxDoor> boxDoorPrototype = new S_Prototype<BoxDoor>(new BoxDoor());
		BoxDoor boxDoor;
		for(int column=0; column < roomArray.length; ++column){
			boxDoor = boxDoorPrototype.clone();
			boxDoor.move(roomArray[column][1], roomArray[column][0]);
			roomArray[column][1].setSide(boxDoor);
			roomArray[column][0].setSide(boxDoor);
			

			boxDoor = boxDoorPrototype.clone();
			boxDoor.move(roomArray[column][1], roomArray[column][2]);
			roomArray[column][1].setSide(boxDoor);
			roomArray[column][2].setSide(boxDoor);
		}
		

		Door door = new Door(roomArray[2][0],roomArray[2][1]);
		roomArray[2][1].setSide(door);
		roomArray[2][0].setSide(door);
	}

	public void deconstruct() {

		Iterator<Horse> iterator = horses.iterator();

		while (iterator.hasNext())
			iterator.next().stop();

		horses.clear();
		Stable.instance().deconstruct();
	}

	// YOUR CODE HERE
	// May be something else is missing?
}
